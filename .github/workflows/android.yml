name: Android CI - build release APK

on:
  push:
    branches: [ "master", "main" ]
  pull_request:
  workflow_dispatch:
    inputs:
      source_url:
        description: 'Homepage URL to fetch'
        required: false
        default: 'https://szzdmj.github.io/index.html'
      base_url:
        description: 'Base URL to fetch webjs.js and sw.js'
        required: false
        default: 'https://szzdmj.github.io/'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '11'

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.10.6'
          channel: 'stable'

      - name: Prepare Flutter module (.android) and SDK path
        shell: bash
        run: |
          set -euo pipefail
          flutter --version

          # 通过 flutter 可执行推导 SDK 根目录（.../bin/flutter 的上一级）
          FLUTTER_SDK="$(dirname "$(dirname "$(command -v flutter)")")"
          echo "Detected FLUTTER_SDK=${FLUTTER_SDK}"

          # 导出环境变量（多重兜底）
          {
            echo "FLUTTER_SDK=${FLUTTER_SDK}"
            echo "FLUTTER_ROOT=${FLUTTER_SDK}"
            echo "FLUTTER_HOME=${FLUTTER_SDK}"
          } >> "$GITHUB_ENV"

          # 小工具：在 properties 文件中“设置/覆盖”键，确保唯一行并带换行
          set_prop () {
            local file="$1"; local key="$2"; local val="$3"
            touch "$file"
            # 删除已存在的 key 行
            sed -i "/^${key}=.*/d" "$file"
            # 确保文件最后一行有换行
            tail -c1 "$file" | read -r _ || echo >> "$file"
            # 追加一行 key=val
            printf "%s=%s\n" "$key" "$val" >> "$file"
          }

          # 1) 根 local.properties（include 脚本常读这里）
          set_prop local.properties "flutter.sdk" "${FLUTTER_SDK}"
          echo "==== root local.properties ===="
          cat local.properties || true

          # 2) 初始化 module（保留 module 标记），仅恢复 lib/main.dart
          cd flutter_webshell
          flutter create --template=module --org com.szzdmj --project-name flutter_webshell --overwrite .
          cd ..
          git checkout -- flutter_webshell/lib/main.dart

          # 3) 安装插件依赖 + 生成 .android
          cd flutter_webshell
          flutter pub add flutter_inappwebview:^5.8.0
          flutter pub get
          flutter build aar

          # 4) module 的 .android/local.properties（子工程直读）
          mkdir -p .android
          set_prop .android/local.properties "flutter.sdk" "${FLUTTER_SDK}"
          echo "==== module .android/local.properties ===="
          cat .android/local.properties || true

          # 5) 校验生成
          ls -la .android
          head -n 120 .android/include_flutter.groovy || true
          cd ..

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Print settings and sanity checks
        shell: bash
        run: |
          echo "==== settings.gradle ===="
          sed -n '1,200p' settings.gradle || true

          echo "==== root local.properties (before build) ===="
          cat local.properties || true

          echo "==== Gradle projects (expect :app and :flutter) ===="
          ./gradlew -Pflutter.sdk="${FLUTTER_SDK}" projects --stacktrace --info --no-daemon || true

      - name: Prepare assets — download only index.html, webjs.js, sw.js (latest)
        env:
          SOURCE_URL: ${{ github.event.inputs.source_url || 'https://szzdmj.github.io/index.html' }}
          BASE_URL: ${{ github.event.inputs.base_url || 'https://szzdmj.github.io/' }}
        run: |
          set -euo pipefail
          mkdir -p app/src/main/assets
          echo "Downloading index.html from ${SOURCE_URL}"
          curl -fsSL -o app/src/main/assets/index.html "${SOURCE_URL}"
          sed -i '1s/^\xEF\xBB\xBF//' app/src/main/assets/index.html || true
          for f in webjs.js sw.js; do
            url="${BASE_URL%/}/${f}"
            dest="app/src/main/assets/${f}"
            echo "Fetching ${url} -> ${dest}"
            curl -fsSL -o "${dest}" "${url}"
          done
          echo "Assets:"
          ls -l app/src/main/assets

      - name: Build Debug (assembleDebug) for quick install test
        run: ./gradlew -Pflutter.sdk="${FLUTTER_SDK}" assembleDebug --stacktrace --info --no-daemon
        env:
          JAVA_TOOL_OPTIONS: "-Dfile.encoding=UTF8"

      - name: Upload debug APK
        if: always()
        run: |
          mkdir -p artifacts
          cp app/build/outputs/apk/debug/*.apk artifacts/debug.apk || true
          ls -lh artifacts || true

      - name: Build Release (assembleRelease)
        run: ./gradlew -Pflutter.sdk="${FLUTTER_SDK}" assembleRelease --stacktrace --info --no-daemon
        env:
          JAVA_TOOL_OPTIONS: "-Dfile.encoding=UTF8"

      - name: Rename APK to szmjtvwebapp.apk
        run: |
          mkdir -p artifacts
          find app/build/outputs/apk/release -maxdepth 1 -type f -name "*.apk" -print -quit | while read -r src; do
            echo "Renaming $src -> artifacts/szmjtvwebapp.apk"
            cp "$src" artifacts/szmjtvwebapp.apk
          done
          ls -lh artifacts

      - name: Upload APK artifact (named szmjtvwebapp)
        uses: actions/upload-artifact@v4
        with:
          name: szmjtvwebapp
          path: artifacts/szmjtvwebapp.apk
