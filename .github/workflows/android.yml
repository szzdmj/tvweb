name: Android CI - build release APK

on:
  push:
    branches: [ "master", "main" ]
  pull_request:
  workflow_dispatch:
    inputs:
      source_url:
        description: 'Homepage URL to fetch'
        required: false
        default: 'https://szzdmj.github.io/index.html'
      base_url:
        description: 'Base URL to fetch webjs.js and sw.js'
        required: false
        default: 'https://szzdmj.github.io/'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '11'

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.10.6'
          channel: 'stable'

      - name: Prepare Flutter module (.android) and SDK path
        shell: bash
        run: |
          set -euo pipefail
          flutter --version

          # 推导 Flutter SDK 根目录（.../bin/flutter 的上一级）
          FLUTTER_SDK="$(dirname "$(dirname "$(command -v flutter)")")"
          echo "Detected FLUTTER_SDK=${FLUTTER_SDK}"

          # 将 FLUTTER_SDK 暴露给后续 steps
          echo "FLUTTER_SDK=${FLUTTER_SDK}" >> "$GITHUB_ENV"

          # 1) 根目录写入 local.properties（include_flutter.groovy 会读取这里）
          printf "flutter.sdk=%s\n" "${FLUTTER_SDK}" >> local.properties
          echo "Root local.properties:"
          cat local.properties || true

          # 2) 初始化 module（保留 module 标记），仅恢复 lib/main.dart；添加依赖并生成 .android
          cd flutter_webshell
          echo "Initializing flutter_webshell as Flutter module (force overwrite)..."
          flutter create --template=module --org com.szzdmj --project-name flutter_webshell --overwrite .

          cd ..
          # 恢复你仓库中的 lib/main.dart（不要覆盖 pubspec.yaml！）
          git checkout -- flutter_webshell/lib/main.dart

          cd flutter_webshell
          # 安装插件依赖
          flutter pub add flutter_inappwebview:^5.8.0
          flutter pub get
          # 生成 .android/include_flutter.groovy
          flutter build aar

          # 3) 在 module 的 .android 下也写入 local.properties（Flutter 子工程会读取这里）
          printf "flutter.sdk=%s\n" "${FLUTTER_SDK}" >> .android/local.properties
          echo "Module .android/local.properties:"
          cat .android/local.properties || true

          # 4) 确认 .android 与 include_flutter.groovy 存在
          ls -la .android || (echo ".android not generated" && exit 1)
          test -f .android/include_flutter.groovy || (echo "include_flutter.groovy missing" && exit 1)
          cd ..

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Prepare assets — download only index.html, webjs.js, sw.js (latest)
        env:
          SOURCE_URL: ${{ github.event.inputs.source_url || 'https://szzdmj.github.io/index.html' }}
          BASE_URL: ${{ github.event.inputs.base_url || 'https://szzdmj.github.io/' }}
        run: |
          set -euo pipefail
          mkdir -p app/src/main/assets
          echo "Downloading index.html from ${SOURCE_URL}"
          curl -fsSL -o app/src/main/assets/index.html "${SOURCE_URL}"
          sed -i '1s/^\xEF\xBB\xBF//' app/src/main/assets/index.html || true
          for f in webjs.js sw.js; do
            url="${BASE_URL%/}/${f}"
            dest="app/src/main/assets/${f}"
            echo "Fetching ${url} -> ${dest}"
            curl -fsSL -o "${dest}" "${url}"
          done
          echo "Assets:"
          ls -l app/src/main/assets

      - name: Build (assembleRelease)
        shell: bash
        run: |
          set -euo pipefail
          # 双保险：以 -Pflutter.sdk 传入
          ./gradlew -Pflutter.sdk="${FLUTTER_SDK}" assembleRelease --no-daemon
        env:
          JAVA_TOOL_OPTIONS: "-Dfile.encoding=UTF8"

      - name: Rename APK to szmjtvwebapp.apk
        run: |
          mkdir -p artifacts
          find app/build/outputs/apk/release -maxdepth 1 -type f -name "*.apk" -print -quit | while read -r src; do
            echo "Renaming $src -> artifacts/szmjtvwebapp.apk"
            cp "$src" artifacts/szmjtvwebapp.apk
          done
          ls -lh artifacts

      - name: Upload APK artifact (named szmjtvwebapp)
        uses: actions/upload-artifact@v4
        with:
          name: szmjtvwebapp
          path: artifacts/szmjtvwebapp.apk
